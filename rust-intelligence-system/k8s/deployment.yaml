apiVersion: apps/v1
kind: Deployment
metadata:
  name: intelligence-api
  namespace: intelligence-system
  labels:
    app.kubernetes.io/name: intelligence-api
    app.kubernetes.io/component: api
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: intelligence-api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: intelligence-api
        app.kubernetes.io/component: api
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: intelligence-system
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: intelligence-api
        image: intelligence-system/api:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: RUST_LOG
          valueFrom:
            configMapKeyRef:
              name: intelligence-system-env
              key: RUST_LOG
        - name: RUST_BACKTRACE
          valueFrom:
            configMapKeyRef:
              name: intelligence-system-env
              key: RUST_BACKTRACE
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: postgres-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: jwt-secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: encryption-key
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: openai-api-key
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: anthropic-api-key
        - name: GOOGLE_API_KEY
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: google-api-key
        - name: HUGGINGFACE_API_KEY
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: huggingface-api-key
        - name: COHERE_API_KEY
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: cohere-api-key
        - name: TOGETHER_API_KEY
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: together-api-key
        - name: TELEGRAM_API_ID
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: telegram-api-id
        - name: TELEGRAM_API_HASH
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: telegram-api-hash
        - name: ETHEREUM_RPC_URL
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: ethereum-rpc-url
        - name: POLYGON_RPC_URL
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: polygon-rpc-url
        - name: BSC_RPC_URL
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: bsc-rpc-url
        envFrom:
        - configMapRef:
            name: intelligence-system-env
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: models
          mountPath: /models
          readOnly: true
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: config
        configMap:
          name: intelligence-system-config
      - name: models
        persistentVolumeClaim:
          claimName: intelligence-models-pvc
      - name: tmp
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "intelligence-system"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - intelligence-api
              topologyKey: kubernetes.io/hostname
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: intelligence-agents
  namespace: intelligence-system
  labels:
    app.kubernetes.io/name: intelligence-agents
    app.kubernetes.io/component: agents
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 5
  selector:
    matchLabels:
      app.kubernetes.io/name: intelligence-agents
  template:
    metadata:
      labels:
        app.kubernetes.io/name: intelligence-agents
        app.kubernetes.io/component: agents
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: intelligence-system
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: intelligence-agents
        image: intelligence-system/agents:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: RUST_LOG
          valueFrom:
            configMapKeyRef:
              name: intelligence-system-env
              key: RUST_LOG
        - name: RUST_BACKTRACE
          valueFrom:
            configMapKeyRef:
              name: intelligence-system-env
              key: RUST_BACKTRACE
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: postgres-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: jwt-secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: encryption-key
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: openai-api-key
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: anthropic-api-key
        - name: GOOGLE_API_KEY
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: google-api-key
        - name: HUGGINGFACE_API_KEY
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: huggingface-api-key
        - name: COHERE_API_KEY
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: cohere-api-key
        - name: TOGETHER_API_KEY
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: together-api-key
        envFrom:
        - configMapRef:
            name: intelligence-system-env
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: models
          mountPath: /models
          readOnly: true
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: config
        configMap:
          name: intelligence-system-config
      - name: models
        persistentVolumeClaim:
          claimName: intelligence-models-pvc
      - name: tmp
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "intelligence-system"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - intelligence-agents
              topologyKey: kubernetes.io/hostname
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: intelligence-analytics
  namespace: intelligence-system
  labels:
    app.kubernetes.io/name: intelligence-analytics
    app.kubernetes.io/component: analytics
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: intelligence-analytics
  template:
    metadata:
      labels:
        app.kubernetes.io/name: intelligence-analytics
        app.kubernetes.io/component: analytics
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: intelligence-system
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: intelligence-analytics
        image: intelligence-system/analytics:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: RUST_LOG
          valueFrom:
            configMapKeyRef:
              name: intelligence-system-env
              key: RUST_LOG
        - name: RUST_BACKTRACE
          valueFrom:
            configMapKeyRef:
              name: intelligence-system-env
              key: RUST_BACKTRACE
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: postgres-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: jwt-secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: encryption-key
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: openai-api-key
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: anthropic-api-key
        - name: GOOGLE_API_KEY
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: google-api-key
        - name: HUGGINGFACE_API_KEY
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: huggingface-api-key
        - name: COHERE_API_KEY
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: cohere-api-key
        - name: TOGETHER_API_KEY
          valueFrom:
            secretKeyRef:
              name: intelligence-system-secrets
              key: together-api-key
        envFrom:
        - configMapRef:
            name: intelligence-system-env
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: models
          mountPath: /models
          readOnly: true
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: config
        configMap:
          name: intelligence-system-config
      - name: models
        persistentVolumeClaim:
          claimName: intelligence-models-pvc
      - name: tmp
        emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "intelligence-system"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - intelligence-analytics
              topologyKey: kubernetes.io/hostname
