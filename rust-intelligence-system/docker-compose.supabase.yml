version: '3.8'

# SUPABASE Docker Compose - Optimized for Supabase Integration
# This configuration uses Supabase for database, auth, and storage

services:
  intelligence-api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=1
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - USE_LOCAL_MODELS=true
      - OLLAMA_HOST=http://ollama:11434
      - SUPABASE_AUTH_ENABLED=true
      - SUPABASE_REALTIME_ENABLED=true
      - SUPABASE_STORAGE_ENABLED=true
    depends_on:
      - ollama
    volumes:
      - ./config:/app/config:ro
      - intelligence-models:/models:ro
    networks:
      - intelligence-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Free Local AI Model Server
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    networks:
      - intelligence-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 120s

  # Optional: Basic monitoring (minimal resources)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-supabase.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=24h'  # Reduced retention
      - '--web.enable-lifecycle'
    networks:
      - intelligence-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

  # Optional: Basic visualization (minimal resources)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/supabase-dashboard.json:/etc/grafana/provisioning/dashboards/supabase.json:ro
    networks:
      - intelligence-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'
    depends_on:
      - prometheus

  # Optional: Supabase Local Development (if needed)
  # Uncomment if you want to run Supabase locally
  # supabase-studio:
  #   image: supabase/studio:latest
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     - SUPABASE_URL=${SUPABASE_URL}
  #     - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
  #   networks:
  #     - intelligence-network
  #   restart: unless-stopped

volumes:
  ollama-data:
  prometheus-data:
  grafana-data:
  intelligence-models:

networks:
  intelligence-network:
    driver: bridge
