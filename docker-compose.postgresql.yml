version: '3.8'

services:
  # PostgreSQL Database
  postgresql:
    image: postgres:15-alpine
    container_name: intelligence-postgresql
    environment:
      POSTGRES_DB: intelligence
      POSTGRES_USER: intelligence
      POSTGRES_PASSWORD: intelligence_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - intelligence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U intelligence -d intelligence"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: intelligence-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - intelligence-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru

  # PostgreSQL Admin (pgAdmin)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: intelligence-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@intelligence.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - intelligence-network
    restart: unless-stopped
    depends_on:
      - postgresql

  # Database Backup Service
  postgres-backup:
    image: postgres:15-alpine
    container_name: intelligence-backup
    environment:
      POSTGRES_DB: intelligence
      POSTGRES_USER: intelligence
      POSTGRES_PASSWORD: intelligence_password
      POSTGRES_HOST: postgresql
    volumes:
      - ./backups:/backups
      - ./backup-scripts:/scripts
    networks:
      - intelligence-network
    restart: "no"
    depends_on:
      - postgresql
    command: >
      sh -c "
        echo '0 2 * * * /scripts/backup.sh' | crontab -
        crond -f
      "

  # Database Monitoring (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: intelligence-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - intelligence-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Database Metrics Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: intelligence-postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://intelligence:intelligence_password@postgresql:5432/intelligence?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - intelligence-network
    restart: unless-stopped
    depends_on:
      - postgresql

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  intelligence-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
